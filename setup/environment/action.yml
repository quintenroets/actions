name: 'Setup environment'
description: 'Setup environment in virtual environment'

inputs:
  python-version:
    description: "Python version to use"
  environment:
    description: "Dependency environment to install"
  editable:
    description: "Install package in editable mode"
  repository:
    description: "Repository to setup"
    default: ${{ github.repository }}
  venv-path:
    description: "Path to save venv"
    default: .venv
  dependency:
    description: "Dependency to install"
  extra-dependency:
    description: "Extra dependency to install"
  system-dependencies-file:
    description: "File that specifies system dependencies"
    default: "system-dependencies.txt"
  install-traceback-hooks:
    description: "Install detailed traceback visualization"
    default: "true"

outputs:
  environment-path:
    description: "The path to the Python binary in the virtual environment"
    value: ${{ steps.activate-virtual-environment.outputs.path }}

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      if: inputs.dependency == ''
      uses: actions/checkout@v4
      with:
        clean: false
        show-progress: false
        repository: ${{ inputs.repository }}

    - name: Check system dependencies
      id: check-system-dependencies
      uses: andstor/file-existence-action@v3
      with:
        files: ${{ inputs.system-dependencies-file }}

    - name: Extract system dependencies
      id: extract-system-dependencies
      if: steps.check-system-dependencies.outputs.files_exists == 'true'
      shell: bash
      run: |
        dependencies=$(cat "${{ inputs.system-dependencies-file }}")
        echo "dependencies=$dependencies" >> "$GITHUB_OUTPUT"

    - name: Install system dependencies
      if: steps.check-system-dependencies.outputs.files_exists == 'true'
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ${{ steps.extract-system-dependencies.outputs.dependencies }}

    - name: Determine Python version
      id: determine-python-version
      shell: bash
      run: |
        if [ ${{ inputs.python-version }} ]; then
          python_version=${{ inputs.python-version }}
        elif [ -n "${{ inputs.dependency }}" ]; then
          python_version="3.11"
        else
          python_version=$(cat pyproject.toml | grep 'requires-python = ">=' | sed 's/requires-python = ">=//' | sed 's/"//' | sed 's/,.*//')
        fi
        echo "python_version=$python_version" >> "$GITHUB_OUTPUT"

    - name: Specify requirements
      if: ${{ inputs.dependency }}
      shell: bash
      run: echo "${{ inputs.dependency }}" > requirements.txt

    - name: Set up uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.determine-python-version.outputs.python_version }}

    - name: Calculate dependencies hash
      # Only hash pyproject.toml if dependency not specified
      id: calculate-dependencies-hash
      shell: bash
      run: |
        if [ -z "${{ inputs.dependency }}" ]; then
          hash="${{ hashFiles('pyproject.toml') }}"
        else
          hash=$(echo "${{ inputs.dependency }}" | tr -d , )
        fi
        echo "hash=$hash" >> "$GITHUB_OUTPUT"

    - name: Activate virtual environment
      id: activate-virtual-environment
      shell: bash
      run: |
        if [ ${{ runner.os }} = 'Windows' ]; then
          bin="Scripts"
        else
          bin="bin"
        fi
        path="$(pwd)/${{ inputs.venv-path }}/$bin"
        echo "$path" >> $GITHUB_PATH
        echo "path=$path" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      shell: bash
      run: |
        python -m venv "${{ inputs.venv-path }}"
        if [ "${{ inputs.dependency }}" ]; then
          requirement="${{inputs.dependency}}"
        elif [ ${{ inputs.environment }} ]; then
          requirement=".[${{ inputs.environment }}]"
        else
          requirement="."
        fi
        install="uv pip install"
        $install --upgrade pip
        if [ "${{ inputs.editable }}" ]; then
          $install -e "$requirement"
        else
          $install "$requirement"
        fi
        if [ "${{ inputs.extra-dependency }}" ]; then
          $install "${{ inputs.extra-dependency }}"
        fi
        if [ "${{ inputs.install-traceback-hooks == 'true' }}" ]; then
          $install powertrace-hooks
        fi

    - name: Cleanup artifacts
      if: ${{ inputs.dependency }}
      shell: bash
      run: rm requirements.txt
